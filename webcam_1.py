# -*- coding: utf-8 -*-
"""webcam_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xK0ZuMB2bRKZSvzMmsonmR_m8A_SN6z1
"""

import pandas as pd
import numpy as np
from zipfile import ZipFile 
import cv2
import os
import keras
from os import getcwd
from os import listdir
import matplotlib.pyplot as plt
from tensorflow.keras import Sequential
from keras.preprocessing.image import ImageDataGenerator
from sklearn.utils import shuffle
from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, BatchNormalization, Activation, ReLU, Flatten

model1 = keras.models.load_model('best_model.h5')

import cv2

labels_dict={0:'wear mask',1:'good work'}
color_dict={0:(0,0,255),1:(0,255,0)}
size = 4
# cv2.namedWindow("mask detection")
vc = cv2.VideoCapture(0)


classifier = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_default.xml')
# print("*******")
# print(dir(classifier))

if vc.isOpened(): # try to get the first frame
    rval, frame = vc.read()
else:
    rval = False

while rval:
    cv2.imshow("mask detection", frame)
    rval, frame = vc.read()
    frame=cv2.flip(frame,1,1) #Flip the image on the webcam
    mini = cv2.resize(frame, (frame.shape[1] // size, frame.shape[0] // size))
    faces = classifier.detectMultiScale(mini)
    for face in faces:
      (x, y, w, h) = [v * size for v in face]
      face_img = frame[y:y+h, x:x+w]
      resized=cv2.resize(face_img,(128,128))
      normalized=resized/255.0
      reshaped=np.reshape(normalized,(1,128,128,3))
      reshaped = np.vstack([reshaped])
      result=model1.predict(reshaped)
      if result > 0.5:
        label = 1
      else:
        label = 0
      
      cv2.rectangle(frame,(x,y),(x+w,y+h),color_dict[label],2)
      cv2.rectangle(frame,(x,y-40),(x+w,y),color_dict[label],-1)
      cv2.putText(frame, labels_dict[label], (x, y-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,(255,255,255),2)

    key = cv2.waitKey(20)
    if key == 27: # exit on ESC
        break
cv2.destroyWindow("preview")